// Initial positions of moving blocks in format [positionX, diffPositionY, width, height, color]
// diffPositionY represents how far up the current obstacle is from the last one
window.stage1obstacles = [
// Easy section
[
    (W) / 2 - 0.25 * 105, -60, 0.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 2.5 * 105, -8 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 0.25 * 105, -8 * 60, 0.5 * 105, 30, "rgb(255,255,255)"
], [  
    (W) / 2 - 2.5 * 105, -8 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 + 1 * 105, -0 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
],
// Tricky block
[
    (W) / 2 - 0.3 * 105, -8 * 60, 2 * 105, 30, "rgb(255,255,255)"
],
// Vertical block
[
    (W) / 2 - 15, -8 * 60, 30, 2 * 105, "rgb(255,255,255)"
],
// Continued clockwise rotations
[
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
],
// Continued counter-clockwise rotations
[
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
],
// Alternating rotations
[
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 1.5 * 105, -5 * 60, 1.5 * 105, 30, "rgb(255,255,255)"
],
// Square obstacle sections
[
    (W) / 2 - 105 - 30, -8 * 60, 60, 60, "rgb(255,255,255)"
], [
    (W) / 2 + 105 - 30, -0 * 60, 60, 60, "rgb(255,255,255)"
], [
    (W) / 2 - 30, -7.5 * 60, 60, 60, "rgb(255,255,255)"
], [
    (W) / 2 - 105 - 30, -7.5 * 60, 60, 60, "rgb(255,255,255)"
], [
    (W) / 2 + 105 - 30, -0 * 60, 60, 60, "rgb(255,255,255)"
], [
    (W) / 2 - 30, -7.5 * 60, 60, 60, "rgb(255,255,255)"
],
// Gate obstacle
[
    (W) / 2 + 50, -7.5 * 60, 2 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 50 - 2 * 105, -0 * 60, 2 * 105, 30, "rgb(255,255,255)"
],
// Hard right calibration
[
    (W) / 2 - 25, -7.5 * 60, 50, 30, "rgb(255,255,255)"
], [
    (W) / 2 + 90, -0 * 60, 200, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 60, -7.5 * 60, 120, 30, "rgb(255,255,255)"
], [
    (W) / 2 + 130, -0 * 60, 175, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 25, -7.5 * 60, 50, 30, "rgb(255,255,255)"
], [
    (W) / 2 + 90, -0 * 60, 200, 30, "rgb(255,255,255)"
],
// Gate obstacle
[
    (W) / 2 + 50, -7.5 * 60, 2 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 50 - 2 * 105, -0 * 60, 2 * 105, 30, "rgb(255,255,255)"
],
// Hard left calibration
[
    (W) / 2 - 25, -7.5 * 60, 50, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 90 - 200, -0 * 60, 200, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 60, -7.5 * 60, 120, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 130 - 175, -0 * 60, 175, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 25, -7.5 * 60, 50, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 90 - 200, -0 * 60, 200, 30, "rgb(255,255,255)"
],
// Gate obstacle
[
    (W) / 2 + 50, -7.5 * 60, 2 * 105, 30, "rgb(255,255,255)"
], [
    (W) / 2 - 50 - 2 * 105, -0 * 60, 2 * 105, 30, "rgb(255,255,255)"
]];
